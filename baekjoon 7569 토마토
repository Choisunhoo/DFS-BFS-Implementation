from collections import deque 
import sys 
input = sys.stdin.readline

n, m, h = map(int, input().split())
graph = []
tomato = []

for i in range(h):
    data = [] 
    for j in range(m):
        tomatos = list(map(int, input().split()))
        for k in range(n):
            if tomatos[k] == 1:
                tomato.append((i, j, k))
        data.append(tomatos)
    graph.append(data)

dx = [0, 0, 1, -1]
dy = [1, -1, 0, 0]
dz = [1, -1]
    
def bfs(tomato_list):
    queue = deque()
    for i in range(len(tomato_list)):
        queue.append((tomato_list[i][0], tomato_list[i][1], tomato_list[i][2]))
    
    while queue: 
        z, x, y = queue.popleft()
        for i in range(4): 
            nx = x + dx[i]
            ny = y + dy[i]
            
            if 0 <= z < h and 0 <= nx < m and 0 <= ny < n: 
                if graph[z][nx][ny] == 0:
                    graph[z][nx][ny] = graph[z][x][y] + 1 
                    queue.append((z, nx, ny))
        for i in range(2):
            nz = z + dz[i]
            if 0 <= nz < h and 0 <= x < m and 0 <= y < n: 
                if graph[nz][x][y] == 0:
                    graph[nz][x][y] =  graph[z][x][y] + 1 
                    queue.append((nz, x, y))
                    
bfs(tomato)
day = 0

for i in range(h):
    for j in range(m):
        for k in range(n):
            if graph[i][j][k] == 0:
                graph[i][j][k]
                print(-1)
                exit()
            else: 
                day = max(day, graph[i][j][k]-1)
                          
print(day)
