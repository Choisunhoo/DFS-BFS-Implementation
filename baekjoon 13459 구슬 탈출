# baekjoon 13459 구슬 탈출 

import sys
from collections import deque
input = sys.stdin.readline

# 세로와 가로의 길이를 입력 
n, m = map(int, input().split())
# 보드의 모양을 저장할 리스트 생성 
graph = []

answer = False

# 보드의 정보를 세로의 길이만큼 반복문을 통해서 입력 
for i in range(n):
    # 보드 정보 입력 
    data = list(input().rstrip())
    # 반복문을 통해서 빨강 구슬과 파랑 구슬의 위치를 찾고 저장
    for j in range(m):
        if data[j] == "R":
            rx, ry = i, j
        elif data[j] == "B":
            bx, by = i, j
    # 보드정보를 리스트에 추가
    graph.append(data)
    
    
# 방문여부 확인을 위한 체크리스트 생성 
check = [[[[False] * m for _ in range(n)] for _ in range(m)] for _ in range(n)]

# 방향 백터 설정
dx = [1, 0, -1, 0]
dy = [0, 1, 0, -1]

# 기울였을때 도착하는 지점을 구하는 함수 설정(구슬의 좌표와 방향 정보)
def lean(x, y, dx, dy):
    # 빨간 구슬과 파란구슬이 같은 위치에 있는 걸 방지하기 위한 이동 칸수
    cnt = 0 
    # 다음이 벽이거나 현재가 구멍인 경우를 제외고 반복해서 같은 방향으로 이동 
    while graph[x + dx][y + dy] != "#" and graph[x][y] != "O":
        x += dx
        y += dy
        cnt += 1
    
    # 멈춰진 위치와 이동 칸수를 반환
    return x, y, cnt

# dfs 함수 생성(빨간 구슬의 좌표, 파란구슬의 좌표)
def dfs(rx, ry, bx, by, cnt):
    global answer
    # 좌표를 담아둘 큐 생성 
    queue = deque()
    # 큐에 빨간 구슬과 파란구슬의 좌표를 입력
    queue.append((rx, ry, bx, by, cnt))
    # 방문여부 리스트의 시작지점을 갱신 
    check[rx][ry][bx][by] = True
    
    # 큐에 원소가 있는경우(빨간 구슬의 좌표와 파란구슬의 좌표가 있는경우) 반복  
    while queue:
        # 큐에 맨 앞의 원소를 가져옴 
        rx, ry, bx, by, cnt = queue.popleft()
        
        # 10번이 넘은 경우 실패
        if cnt > 10:
            break
        # 방향백터의 개수만큼 반복 
        for i in range(4):
            # 기울이기 함수를 통해서 파란구슬과 빨간구슬의 이동후 좌표를 가져옴 
            nrx, nry, rcnt = lean(rx, ry, dx[i], dy[i])
            nbx, nby, bcnt = lean(bx, by, dx[i], dy[i])
            # 만약 파란구슬이 구멍에 빠지지 않은 경우(실패조건)
            if graph[nbx][nby] != "O":
                # 만약 빠지지 않은상태에서 빨간 구슬이 구멍에 들어간 경우(성공조건)
                if graph[nrx][nry] == "O":
                    # 1을 출력후 종료 
                    answer = True
                    return
                # 만약 최대 이동좌표가 겹쳤을경우 
                if nrx == nbx and nry == nby:
                    # 빨간 구슬이 파란구슬보다 더 움직인 경우
                    if rcnt > bcnt:
                        # 빨간 구슬을 한칸 뒤로 이동
                        nrx -= dx[i]
                        nry -= dy[i]
                    # 파란 구슬이 빨간 구슬보다 더 움직인 경우
                    else:
                        # 파랑 구슬을 한칸 뒤로 이동
                        nbx -= dx[i]
                        nby -= dy[i]

                # 방문여부 확인 후 방문 처리를 해줌
                if not check[nrx][nry][nbx][nby]:
                    check[nrx][nry][nbx][nby] = True
                    # 다음 위치 탐색을 위해 queue에 넣어줌
                    queue.append((nrx, nry, nbx, nby, cnt + 1))



# 함수 실행 
dfs(rx, ry, bx, by, 1)

# 결과 출력 
if not answer:
    print(0)
else:
    print(1)
