# baekjoon 1987 알파벳 
import sys
input = sys.stdin.readline

# BFS 알고리즘
def bfs(x, y):
    # 결과값을 global로 항상 사용하게 만듬
    global result
    # deque 대신에 시간 복잡도를 줄이기 위해서 set 사용
    queue = set([(x, y, board[x][y])])
    # queue가 있는 경우에 계속되는 반복문 
    while queue:
        # 위치 값과 저장된 알파벳을 가져옴
        x, y, alphas = queue.pop()
        # 방향백터별 반복문 시작
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            # 범위 안에 있고 전에 저장이 안된 알파벳일 경우 알파벳을 저장 및 q에 좌표값을 저장
            if 0 <= nx < R and  0 <= ny < C and board[x][y] and board[nx][ny] not in alphas:
                queue.add((nx, ny, alphas+board[nx][ny]))
                # 결과값을 지금의 결과값과 전에 저장된 알파벳 + 1 값중에 높은 값으로 설정
                result = max(result, len(alphas)+1)

        
# 알파벳의 가로 세로 길이를 구함    
R, C = map(int, input().split())
# 알파벳을 입력
board = []
for _ in range(R):
    data = list(input())
    board.append(data)

# 방향 백터를 저장
dx = [1, -1, 0, 0]
dy = [0, 0, 1, -1]

#결과 값을 초기화
result = 1
# bfs 함수 시작
bfs(0,0)
print(result)
